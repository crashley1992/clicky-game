{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Cards/Cards.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Cards","props","name","alt","src","image","id","onClick","handleImageClick","Wrapper","children","App","state","goose","score","highScore","ids","gooseDisplay","setState","scoreIncrement","console","log","highScoreUpdate","resetGame","geese","shuffleGoose","includes","push","i","length","j","Math","floor","random","tempValue","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6+CAkBeA,G,MAdG,WACd,OACA,yBAAKC,UAAU,aACX,wBAAIA,UAAU,aAAd,yBACA,yBAAKA,UAAU,kBACf,sCACA,oEACA,4EACA,qGCIOC,G,MAbD,SAACC,GACX,OACJ,yBAAKF,UAAU,kCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,iBACP,8BAAM,yCAAeE,EAAMC,OAC/B,yBAAKC,IAAKF,EAAMC,KAAME,IAAKH,EAAMI,MAAOC,GAAIL,EAAMK,GAAIC,QAAU,kBAAMN,EAAMO,iBAAiBP,EAAMK,YCDhGG,EANC,SAACR,GACb,OACI,yBAAKF,UAAU,WAAWE,EAAMS,WC8EzBC,E,2MAvEbC,MAAQ,CACNC,QACAC,MAAO,EACPC,UAAW,EACXC,IAAK,I,EAGPC,aAAe,WACb,EAAKC,SAAS,CAAEL,W,EAGlBM,eAAiB,WACfC,QAAQC,IAAI,EAAKT,MAAME,OACvB,EAAKI,SAAS,CAAEJ,MAAO,EAAKF,MAAME,MAAQ,K,EAG5CQ,gBAAkB,WACb,EAAKV,MAAME,OAAS,EAAKF,MAAMG,UAChC,EAAKG,SAAS,CAAEH,UAAW,EAAKH,MAAME,QAEtC,EAAKI,SAAS,CAAEJ,MAAO,K,EAI3BS,UAAY,WACV,EAAKL,SAAS,CAAEJ,MAAO,IACvB,EAAKI,SAAS,CAAEF,IAAK,M,EAGvBR,iBAAmB,SAACF,GAClB,EAAKY,SAAS,CAAEM,MAAO,EAAKC,aAAaZ,KACzCO,QAAQC,IAAIf,GAER,EAAKM,MAAMI,IAAIU,SAASpB,IAI1B,EAAKiB,YACL,EAAKD,oBAJL,EAAKV,MAAMI,IAAIW,KAAKrB,GACpB,EAAKa,mB,EAQXM,aAAe,SAAAZ,GAEb,IADA,IAAIe,EAAIf,EAAMgB,OAAS,EAChBD,EAAI,GAAI,CACb,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAYrB,EAAMe,GACxBf,EAAMe,GAAKf,EAAMiB,GACjBjB,EAAMiB,GAAKI,EACXN,IAEF,OAAOf,G,wEAGE,IAAD,OACN,OACI,kBAAC,EAAD,KACA,kBAAC,EAAD,MACA,wBAAId,UAAU,SAAd,UAA8BoC,KAAKvB,MAAME,MAAzC,kBAA+DqB,KAAKvB,MAAMG,WAC5EoB,KAAKvB,MAAMC,MAAMuB,KAAI,SAAAvB,GAAK,OAAI,kBAAC,EAAD,CAC5BP,GAAIO,EAAMP,GACVJ,KAAMW,EAAMX,KACZG,MAAOQ,EAAMR,MACbG,iBAAkB,EAAKA,2B,GAnEb6B,a,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e390da9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './jumbotron.css';\r\n//import gif from './goose.gif';\r\n\r\nconst Jumbotron = () => {\r\n    return(\r\n    <div className=\"jumbotron\">\r\n        <h1 className=\"display-4\">Untitled Goose Memory</h1>\r\n        <div className=\"text-container\">\r\n        <h2>Rules:</h2>\r\n        <p>You can only click on an image once. </p>\r\n        <p>It's Game Over if you click on an image twice</p>\r\n        <p>Current Score and High Score are tracked in the upper right corner</p>\r\n    </div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './cards.css';\r\n\r\nconst Cards = (props) => {\r\n    return(\r\n<div className=\"d-inline-flex p-2 bd-highlight\">\r\n    <div className=\"card\">\r\n        <div className=\"img-container\">\r\n                <span><strong>Name: {props.name}</strong></span>\r\n            <img alt={props.name} src={props.image} id={props.id} onClick={ () => props.handleImageClick(props.id)} />\r\n        </div>\r\n    </div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\n\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport goose from './goose.json';\n// Component Imports\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Cards from './components/Cards/Cards';\nimport Wrapper from './components/Wrapper/Wrapper';\n\nclass App extends Component {\n\n  //state holds goose json data\n  state = {\n    goose,\n    score: 0,\n    highScore: 0,\n    ids: []\n  }\n//makes goose data appear\n  gooseDisplay = () => {\n    this.setState({ goose });\n  }\n\n  scoreIncrement = () => {\n    console.log(this.state.score);\n    this.setState({ score: this.state.score + 1});\n  }\n\n  highScoreUpdate = () => {\n    if(this.state.score >= this.state.highScore) {\n      this.setState({ highScore: this.state.score });\n    } else {\n      this.setState({ score: 0 });\n    }\n  };\n\n  resetGame = () => {\n    this.setState({ score: 0 });\n    this.setState({ ids: [] });\n  }\n\n  handleImageClick = (id) => {\n    this.setState({ geese: this.shuffleGoose(goose) })\n    console.log(id);\n\n    if(!this.state.ids.includes(id)) {\n      this.state.ids.push(id);\n      this.scoreIncrement();\n    } else {\n      this.resetGame();\n      this.highScoreUpdate();\n    }\n  }\n\n   //shuffles goose cards randomly\nshuffleGoose = goose => {\n  let i = goose.length - 1;\n  while( i > 0 ) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const tempValue = goose[i];\n    goose[i] = goose[j];\n    goose[j] = tempValue;\n    i--;\n  }\n  return goose;\n}\n\n  render(){\n    return (\n        <Wrapper>\n        <Jumbotron />\n        <h2 className='score'>SCORE: {this.state.score} | HIGH SCORE: {this.state.highScore}</h2>\n     {this.state.goose.map(goose =>(<Cards\n        id={goose.id}\n        name={goose.name}\n        image={goose.image}\n        handleImageClick={this.handleImageClick}\n        />))}\n        </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}